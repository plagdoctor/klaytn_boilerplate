require('it-each')({ testPerIteration: true })
const { expect } = require('../extendedChai')

const BigNumber = require('bignumber.js')

const testRPCURL = require('../testrpc')
const Caver = require('../../index.js')
const Chance = require('chance')
const chance = new Chance()

const helpers = rootRequire('caver-core-helpers')

let caver
let reservoirAccountPrivateKey
let reservoirAccountAddress
let humanreadableAddressPrefix = chance.last().replace(' ', '')
console.log('humanreadableAddressPrefix is: ', humanreadableAddressPrefix)

const specificPrivateKey = String(process.env.privateKey).indexOf('0x') === -1
  ? '0x' + process.env.privateKey
  : process.env.privateKey

beforeEach(() => {
  
  caver = new Caver(testRPCURL)
  
  if (specificPrivateKey) {
    reservoirAccountPrivateKey = specificPrivateKey
    const { address } = caver.klay.accounts.create(specificPrivateKey)
    reservoirAccountAddress = address
  }
  
  reservoirAccountPrivateKey = '0x13d9b943f760091854a403d0b59e21ef73908691e8269479c0965788f4376d59'
  reservoirAccountAddress = '0x90f70a303b6bca07d0275270cb6b0cea3870b3a7'
})

// @TODO: Too nested transaction.
describe('Account Update with ACCOUNT_KEY_FAIL_TAG', () => {
  it('Should fail to send a "VALUE TRANSFER" transaction from the account used AccountKeyFail key', (done) => {
  
    caver.klay.accounts.wallet.add(reservoirAccountPrivateKey)
  
    const { address: anonymousAddress, privateKey: anonymousPrivateKey } = caver.klay.accounts.create()
    
    caver.klay.accounts.wallet.add(anonymousPrivateKey)
    const transaction1 = {
      type: 'ACCOUNT_CREATION',
      from: reservoirAccountAddress,
      to: anonymousAddress,
      gas: '300000',
      value: caver.utils.toPeb(5, 'KLAY'),
    }
    
    caver.klay.sendTransaction(transaction1)
      .on('transactionHash', console.log)
      .on('receipt', async (receipt) => {
        
        const transactionFromAnonymous = {
          type: 'VALUE_TRANSFER',
          from: anonymousAddress,
          to: reservoirAccountAddress,
          gas: '300000',
          value: caver.utils.toPeb(1, 'KLAY'),
        }
  
        caver.klay.sendTransaction(transactionFromAnonymous)
          .on('transactionHash', console.log)
          .on('receipt', async (receipt) => {
            const transaction2 = {
              type: 'ACCOUNT_UPDATE',
              from: anonymousAddress,
              failKey: true,
              gas: '300000',
              value: caver.utils.toPeb(5, 'KLAY'),
            }
            
            caver.klay.sendTransaction(transaction2)
              .on('transactionHash', console.log)
              .on('receipt', async (receipt) => {
                const transaction3 = {
                  type: 'VALUE_TRANSFER',
                  from: anonymousAddress,
                  to: reservoirAccountAddress,
                  gas: '300000',
                  value: caver.utils.toPeb(1, 'KLAY'),
                }
                
                caver.klay.sendTransaction(transaction3)
                  .on('transactionHash', console.log)
                  .on('receipt', async (receipt) => {
                    
                    done()
                  })
              })
          })
      })
      .on('error', console.log)
  }).timeout(200000)
})
