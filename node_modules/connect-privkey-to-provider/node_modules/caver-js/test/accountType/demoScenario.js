require('it-each')({ testPerIteration: true })
const { expect } = require('../extendedChai')

const BigNumber = require('bignumber.js')

const testRPCURL = require('../testrpc')
const Caver = require('../../index.js')
const Chance = require('chance')
const chance = new Chance()

const helpers = rootRequire('caver-core-helpers')
const { ACCOUNT_KEY_PUBLIC_TAG } = helpers.constants

let caver
let reservoirAccountPrivateKey
let reservoirAccountAddress
let humanreadableAddressPrefix = chance.last().replace(' ', '')
console.log('humanreadableAddressPrefix is: ', humanreadableAddressPrefix)

const specificPrivateKey = String(process.env.privateKey).indexOf('0x') === -1
  ? '0x' + process.env.privateKey
  : process.env.privateKey

beforeEach(() => {
  
  caver = new Caver(testRPCURL)
  
  if (specificPrivateKey) {
    reservoirAccountPrivateKey = specificPrivateKey
    const { address } = caver.klay.accounts.create(specificPrivateKey)
    reservoirAccountAddress = address
  }
  
  reservoirAccountPrivateKey = '0x13d9b943f760091854a403d0b59e21ef73908691e8269479c0965788f4376d59'
  reservoirAccountAddress = '0x90f70a303b6bca07d0275270cb6b0cea3870b3a7'
})


describe('Demo scenario', () => {
  it('1. Create a multisig account', (done) => {
  
    caver.klay.accounts.wallet.add(reservoirAccountPrivateKey)
  
    const { address: anonymousAddress } = caver.klay.accounts.create()
  
    const multisigPubKey1 = caver.klay.accounts.privateKeyToPublicKey(caver.klay.accounts.create().privateKey)
    const multisigPubKey2 = caver.klay.accounts.privateKeyToPublicKey(caver.klay.accounts.create().privateKey)
    const multisigPubKey3 = caver.klay.accounts.privateKeyToPublicKey(caver.klay.accounts.create().privateKey)
  
    const xyPoints1 = caver.utils.xyPointFromPublicKey(multisigPubKey1)
    const xyPoints2 = caver.utils.xyPointFromPublicKey(multisigPubKey2)
    const xyPoints3 = caver.utils.xyPointFromPublicKey(multisigPubKey3)

  // 1. Check Account key type
  // if (xyPoints !== undefined && xyPoints.length) { // ACCOUNT_KEY_PUBLIC_TAG
    const [pubX1, pubY1] = xyPoints1
    const [pubX2, pubY2] = xyPoints2
    const [pubX3, pubY3] = xyPoints3
    
    accountKey1 = ACCOUNT_KEY_PUBLIC_TAG + caver.utils.rlpEncode([pubX1, pubY1]).slice(2)
    accountKey2 = ACCOUNT_KEY_PUBLIC_TAG + caver.utils.rlpEncode([pubX2, pubY2]).slice(2)
    accountKey3 = ACCOUNT_KEY_PUBLIC_TAG + caver.utils.rlpEncode([pubX3, pubY3]).slice(2)
    
    console.log(accountKey1)
    console.log(accountKey2)
    console.log(accountKey3)
  
    // const transaction = {
    //   type: 'ACCOUNT_CREATION',
    //   from: reservoirAccountAddress,
    //   to: anonymousAddress,
    //   gas: '300000',
    //   value: caver.utils.toPeb(5, 'KLAY'),
    // }
    // 
    // caver.klay.sendTransaction(transaction)
    //   .on('transactionHash', console.log)
    //   .on('receipt', async (receipt) => {
    //     const newAccountBalance = await caver.klay.getBalance(anonymousAddress)
    // 
    //     expect(newAccountBalance).to.equal(caver.utils.toPeb(5, 'KLAY'))
    // 
    //     done()
    //   })
    //   .on('error', console.log)
  }).timeout(200000)
})
