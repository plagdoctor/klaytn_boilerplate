const Caver = require('caver-js')

// TODO: Replace Web3 provider engine to Caver
const HookedSubprovider = require('web3-provider-engine/subproviders/hooked-wallet.js')
const ProviderEngine = require('web3-provider-engine')

const CaverSubProvider = require('./subprovider')

function PrivkeyConnector(privateKey, providerUrl) {
  this.addresses = []
  // Initialize caver
  const caver = new Caver(providerUrl)

  var wallet = caver.klay.accounts.privateKeyToAccount(privateKey)
  caver.klay.accounts.wallet.add(wallet)

  this.addresses.push(wallet.address)

  // Set provider engine.
  this.engine = new ProviderEngine()

  /**
   * D.T = Trasnaction for deploy
   */

  // 1) For signing D.T
  // Should provide `signTransaction` method to sign a transaction for deploying.
  this.engine.addProvider(
    new HookedSubprovider({
      signTransaction: async (txParams) => {
        const targetWallet = caver.klay.accounts.wallet[txParams.from]

        if (!targetWallet) throw Error('Account not found')

        const { rawTransaction } = await caver.klay.accounts.signTransaction(
          txParams,
          targetWallet.privateKey,
        )

        return rawTransaction
      },
      getAccounts: (callback) => callback(null, this.addresses),
    })
  )

  // 2) For sending D.T to klaytn node.
  // Should provide `signTransaction` method to sign a transaction for deploying.
  this.engine.addProvider(new CaverSubProvider(caver.currentProvider))

  this.engine.start()
}

PrivkeyConnector.prototype.sendAsync = function (...args) {
  return this.engine.sendAsync.apply(this.engine, args)
}

PrivkeyConnector.prototype.send = function (...args) {
  return this.engine.send.apply(this.engine, args)
}

module.exports = PrivkeyConnector
